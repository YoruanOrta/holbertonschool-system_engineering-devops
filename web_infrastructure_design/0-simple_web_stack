        ```markdown
        # Simple Web Stack Design

        ## Diagram
        ```
                  +----------------------+
                  |      Internet        |
                  +----------+-----------+
                             |
                             v
                  +----------+-----------+
                  |     DNS Resolver     |
                  | www.foobar.com -> 8.8.8.8 |
                  +----------+-----------+
                             |
                             v
                  +----------------------+
                  |   Server (8.8.8.8)   |
                  |----------------------|
                  |  Nginx (Web Server)  |
                  |      ↓               |
                  | Application Server   |
                  | (e.g. Flask/Gunicorn)|
                  |      ↓               |
                  |    MySQL DB          |
                  +----------------------+
        ```

        ## Key Concepts

        ### What is a server?
        A server is a physical or virtual machine that provides services or resources to other devices (clients) over a network.

        ### What is the role of the domain name?
        The domain name (e.g., `foobar.com`) allows users to access the website using a readable name instead of an IP address.

        ### What type of DNS record is `www` in `www.foobar.com`?
        It is typically an A record pointing to `8.8.8.8` or a CNAME record.

        ### What is the role of the web server?
        The web server (e.g., Nginx) handles HTTP requests, serves static files, and forwards requests to the application server.

        ### What is the role of the application server?
        The application server runs backend code, processes logic, and communicates with the database to build dynamic responses.

        ### What is the role of the database?
        The database stores persistent data such as users, posts, reservations, etc., used by the application.

        ### How does the server communicate with the user?
        It uses the HTTP or HTTPS protocol over the TCP/IP network stack.

        ## Challenges

        ### Single Point of Failure (SPOF)
        If the single server fails, the entire website becomes unavailable.

        ### Downtime During Maintenance
        When updating code or restarting the server (e.g., to deploy), the website is temporarily unavailable.

        ### Scalability Limitations
        The server may struggle to handle high traffic. Excessive user access can cause crashes or slow performance.